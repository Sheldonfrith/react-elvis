"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./src/react-elvis/components/contexts/ElvisContext.tsx":
/*!**************************************************************!*\
  !*** ./src/react-elvis/components/contexts/ElvisContext.tsx ***!
  \**************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ElvisContext: function() { return /* binding */ ElvisContext; },\n/* harmony export */   ElvisProvider: function() { return /* binding */ ElvisProvider; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers */ \"./src/react-elvis/components/contexts/helpers.ts\");\n/* harmony import */ var _helpers_myAssert__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../helpers/myAssert */ \"./src/react-elvis/helpers/myAssert.ts\");\n/* harmony import */ var _config_messages__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../config/messages */ \"./src/react-elvis/config/messages.ts\");\n/**MIT License\r\n\r\nCopyright (c) 2024 Sheldon Frith\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n\r\nFor more information and to contribute to this project, visit:\r\nhttps://github.com/Sheldonfrith/react-elvis\r\n*/ \nvar _s = $RefreshSig$();\n\n\n\n\n//initialize state structure here\nconst ElvisContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createContext({\n    wrapAsyncFunction: (query, args)=>{\n        return new Promise(()=>{});\n    },\n    wrapAsyncFunction_Abortable: (query, args)=>{\n        return new Promise(()=>{});\n    },\n    registerLoadingDisplayer: (c)=>{},\n    registerErrorDisplayer: (c)=>{},\n    registerDefaultLoadingDisplayer: (c)=>{},\n    registerDefaultErrorDisplayer: (c)=>{}\n});\nconst ElvisProvider = (param)=>{\n    let { config: elvisConfig, children } = param;\n    _s();\n    //! STATE VARIABLES //\n    const [loadingDisplayers, setLoadingDisplayers] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [errorDisplayers, setErrorDisplayers] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [defaultLoadingDisplayer, setDefaultLoadingDisplayer] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)();\n    const [defaultErrorDisplayer, setDefaultErrorDisplayer] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)();\n    const [pendingUncatchableErrors, setPendingUncatchableErrors] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    //! DISPLAYER FINDERS //\n    const findLoadingDisplayer = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((query)=>{\n        const displayer = loadingDisplayers.find((d)=>d.identifier === query.identifier);\n        const d = displayer || defaultLoadingDisplayer;\n        (0,_helpers_myAssert__WEBPACK_IMPORTED_MODULE_3__.assert)(d, \"No default Loading Displayer found.\");\n        return d;\n    }, [\n        loadingDisplayers,\n        defaultLoadingDisplayer\n    ]);\n    const findErrorDisplayers = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((query, error)=>{\n        return (0,_helpers__WEBPACK_IMPORTED_MODULE_2__.findErrorDisplayers_Internals)(errorDisplayers, defaultErrorDisplayer, query, error);\n    }, [\n        errorDisplayers,\n        defaultErrorDisplayer\n    ]);\n    const findAllErrorDisplayers = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((query)=>{\n        const displayers = errorDisplayers.filter((d)=>d.identifier === query.identifier);\n        if (displayers.length > 0) {\n            return displayers;\n        } else {\n            if (defaultErrorDisplayer) {\n                return [\n                    defaultErrorDisplayer\n                ];\n            }\n            throw new Error(\"No default Error Displayer found.\");\n        }\n    }, [\n        errorDisplayers,\n        defaultErrorDisplayer\n    ]);\n    //! EVENT HANDLERS //\n    const loadingStart = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((query)=>{\n        console.log(\"loadingStart\", query.identifier);\n        const d = findLoadingDisplayer(query);\n        d.onLoadingStart(query.config.loading || _config_messages__WEBPACK_IMPORTED_MODULE_4__.DefaultUserFacingLoading, query.abortController);\n        // error displayer\n        const errorDisplayers = findAllErrorDisplayers(query);\n        errorDisplayers.forEach((d)=>{\n            d.onNewFunctionCall();\n        });\n    }, [\n        findAllErrorDisplayers,\n        findLoadingDisplayer\n    ]);\n    const loadingCancel = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((query)=>{\n        console.log(\"loadingCancel\", query.identifier);\n        const d = findLoadingDisplayer(query);\n        d.onLoadingCancel(query.config.cancelled || _config_messages__WEBPACK_IMPORTED_MODULE_4__.DefaultUserFacingCancelled);\n    }, [\n        findLoadingDisplayer\n    ]);\n    const loadingEnd = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((query)=>{\n        console.log(\"loadingEnd\", query.identifier);\n        const d = findLoadingDisplayer(query);\n        d.onLoadingEnd(query.config.success || _config_messages__WEBPACK_IMPORTED_MODULE_4__.DefaultUserFacingSuccess);\n    }, [\n        findLoadingDisplayer\n    ]);\n    const errorDetected = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((query, error)=>{\n        (0,_helpers__WEBPACK_IMPORTED_MODULE_2__.errorDetected_Internals)(query, error, findErrorDisplayers, findLoadingDisplayer);\n    }, [\n        findLoadingDisplayer,\n        findErrorDisplayers\n    ]);\n    //! DEFAULT DISPLAYERS CHECK //\n    //wait for app to load, then check for default displayers\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        setTimeout(()=>{\n            setDefaultErrorDisplayer((prev)=>{\n                if (!prev && !(elvisConfig === null || elvisConfig === void 0 ? void 0 : elvisConfig.disableDefaultErrorDisplayerCheck)) {\n                    throw new Error(\"No default error displayer found. Please register a default error displayer or disable the default displayer check using the config prop in the Eals Provider.\");\n                }\n                return prev;\n            });\n            setDefaultLoadingDisplayer((prev)=>{\n                if (!prev && !(elvisConfig === null || elvisConfig === void 0 ? void 0 : elvisConfig.disableDefaultLoadingDisplayerCheck)) {\n                    throw new Error(\"No default loading displayer found. Please register a default loading displayer or disable the default displayer check using the config prop in the Eals Provider.\");\n                }\n                return prev;\n            });\n        }, (elvisConfig === null || elvisConfig === void 0 ? void 0 : elvisConfig.graceTimeToDetectDefaultDisplayers) || 1000);\n    }, []);\n    //!UNHANDLED PROMISE REJECTION HANDLER//\n    // filter for when the user's code is bad\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const unhandledRejectionHandler = (event)=>{\n            setPendingUncatchableErrors((prev)=>{\n                return [\n                    ...prev,\n                    {\n                        query: {\n                            identifier: \"unhandledrejection\",\n                            callback: async ()=>{},\n                            config: _config_messages__WEBPACK_IMPORTED_MODULE_4__.unhandledPromiseRejectionError\n                        },\n                        error: event.reason\n                    }\n                ];\n            });\n        };\n        window.addEventListener(\"unhandledrejection\", unhandledRejectionHandler, {\n            once: true\n        });\n        return ()=>{\n            window.removeEventListener(\"unhandledrejection\", unhandledRejectionHandler);\n        };\n    }, []);\n    // handle the uncatchable errors\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (pendingUncatchableErrors.length > 0) {\n            console.log(\"handling uncatchable error\", pendingUncatchableErrors);\n            const error = pendingUncatchableErrors[0];\n            errorDetected(error.query, error.error);\n            setPendingUncatchableErrors((prev)=>{\n                return prev.slice(1);\n            });\n        }\n    }, [\n        pendingUncatchableErrors,\n        errorDetected\n    ]);\n    //!TODO MOVE THIS\n    const errorsForPromise = (promise)=>{\n        return promise.then((data)=>[\n                data,\n                undefined\n            ]).catch((error)=>Promise.resolve([\n                undefined,\n                error\n            ]));\n    };\n    //! CORE FUNCTIONALITY //\n    const runAsyncFunctionWithEventHandlers = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async (query, args)=>{\n        console.log(\"runAsyncFunctionWithEventHandlers\", query.identifier);\n        try {\n            // Set loading to true while the request is in progress\n            loadingStart(query);\n            const [result, error] = await errorsForPromise(query.callback(...args));\n            if (error) {\n                console.log(\"errorsForPromise detected...\", error);\n                throw error;\n            }\n            loadingEnd(query);\n            console.log(\"SUCCESSFULLY RAN THE CALLBACK\");\n            return result;\n        } catch (error) {\n            console.log(\"caught error in runAsyncFunctionWithEventHandlers\", error);\n            loadingEnd(query);\n            errorDetected(query, error);\n        }\n    }, [\n        loadingStart,\n        loadingEnd,\n        errorDetected\n    ]);\n    //! USER FACING FUNCTIONS //\n    function wrapAsyncFunction(query, args) {\n        return runAsyncFunctionWithEventHandlers(query, args);\n    }\n    function wrapAsyncFunction_Abortable(query, args) {\n        var _query_abortController, _query_abortController1;\n        if ((_query_abortController = query.abortController) === null || _query_abortController === void 0 ? void 0 : _query_abortController.signal.aborted) {\n            throw new Error(\"You are probably cancelling and retrying too fast. Your abort signal is already aborted, possibly from a previous cancellation that hasnt reset yet.\");\n        }\n        console.log(\"registering async function\");\n        function abortEventListener() {\n            loadingCancel(query);\n        }\n        (_query_abortController1 = query.abortController) === null || _query_abortController1 === void 0 ? void 0 : _query_abortController1.signal.addEventListener(\"abort\", abortEventListener, {\n            once: true\n        });\n        return runAsyncFunctionWithEventHandlers(query, [\n            query.abortController,\n            ...args\n        ]);\n    }\n    function registerLoadingDisplayer(c) {\n        setLoadingDisplayers((prev)=>{\n            return [\n                ...prev,\n                {\n                    ...c\n                }\n            ];\n        });\n    }\n    function registerErrorDisplayer(c) {\n        setErrorDisplayers((prev)=>{\n            return [\n                ...prev,\n                {\n                    ...c\n                }\n            ];\n        });\n    }\n    function registerDefaultErrorDisplayer(c) {\n        setDefaultErrorDisplayer({\n            ...c\n        });\n    }\n    function registerDefaultLoadingDisplayer(c) {\n        setDefaultLoadingDisplayer({\n            ...c\n        });\n    }\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(ElvisContext.Provider, {\n        value: {\n            wrapAsyncFunction,\n            wrapAsyncFunction_Abortable,\n            registerLoadingDisplayer,\n            registerErrorDisplayer,\n            registerDefaultLoadingDisplayer,\n            registerDefaultErrorDisplayer\n        },\n        children: children\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\sheld\\\\OneDrive\\\\Documents\\\\GitHub\\\\react-elvis\\\\example\\\\src\\\\react-elvis\\\\components\\\\contexts\\\\ElvisContext.tsx\",\n        lineNumber: 320,\n        columnNumber: 5\n    }, undefined);\n};\n_s(ElvisProvider, \"TjI8IuW+pfWTAbjNrqUJ3mK299U=\");\n_c = ElvisProvider;\nvar _c;\n$RefreshReg$(_c, \"ElvisProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/react-elvis/components/contexts/ElvisContext.tsx\n"));

/***/ })

});